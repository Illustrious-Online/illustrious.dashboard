name: "[ill.dashboard] Perform release"
permissions:
  contents: read
  pull-requests: write
on:
  push:
    branches:
      - main
jobs:
  dashboard-release:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    env:
      CURRENT_VERSION: 0.0.0
      NEXT_VERSION: 0.0.0
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install Dependencies
        run: bun install --frozen-lockfile
      ### Compare versions using semantic-release
      - name: Compare versions
        id: compare
        run: |
          export CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
          export NEXT_VERSION=$(bunx semantic-release --dry-run | grep 'The next release version is' | awk '{print $NF}')
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
      ### Update version in files using NEXT_VERSION
      - name: Update versions based on NEXT_VERSION
        if: env.NEXT_VERSION != env.CURRENT_VERSION
        run: |
          jq --arg nextVersion "${{ env.NEXT_VERSION }}" '.version = $nextVersion' package.json > tmp.json && mv tmp.json package.json
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          sed -i "s/tag: .*/tag: ${{ env.NEXT_VERSION }}/" k8s/values.yaml
          sed -i "s/version: .*/version: ${{ env.NEXT_VERSION }}/" k8s/Chart.yaml
          sed -i 's/appVersion: .*/appVersion: "'${{ env.NEXT_VERSION }}'"/' k8s/Chart.yaml
      - name: Build Docker image
        run: |
          bun run build
          docker build -t ${{ secrets.REGISTRY_URL }}:latest .
          docker push ${{ secrets.REGISTRY_URL }}:latest
      ### Push new versioned Docker image to registry
      - name: Push versioned Docker image to registry, if updated
        if: env.NEXT_VERSION != env.CURRENT_VERSION
        run: |
          docker build -t ${{ secrets.REGISTRY_URL }}:${{ env.NEXT_VERSION }} .
          docker push ${{ secrets.REGISTRY_URL }}:${{ env.NEXT_VERSION }}
      ### Push argo-cd application updates
      - name: Push argo-cd application updates, if updated
        if: env.NEXT_VERSION != env.CURRENT_VERSION
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git
          git add .
          git commit -m "chore: Prepare deployment (${{ env.NEXT_VERSION }}) [skip ci]"
          git push origin main
     ### Execute final versioning updates via semantic-release
      - name: Execute semantic-release
        run: bunx semantic-release